[{"/Users/charchill/Work/Projects/catchphrase-word-game/src/index.js":"1","/Users/charchill/Work/Projects/catchphrase-word-game/src/components/router/index.js":"2","/Users/charchill/Work/Projects/catchphrase-word-game/src/pages/main/main.js":"3","/Users/charchill/Work/Projects/catchphrase-word-game/src/components/main-body-content/mbc.js":"4","/Users/charchill/Work/Projects/catchphrase-word-game/src/pages/in-game/ingame.js":"5","/Users/charchill/Work/Projects/catchphrase-word-game/src/pages/pre-game/pregame.js":"6"},{"size":900,"mtime":1609638087375,"results":"7","hashOfConfig":"8"},{"size":588,"mtime":1609154204580,"results":"9","hashOfConfig":"8"},{"size":831,"mtime":1612955699370,"results":"10","hashOfConfig":"8"},{"size":3165,"mtime":1612955859631,"results":"11","hashOfConfig":"8"},{"size":4216,"mtime":1611777571688,"results":"12","hashOfConfig":"8"},{"size":1278,"mtime":1609638847429,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"7yfzp7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/charchill/Work/Projects/catchphrase-word-game/src/index.js",[],["29","30"],"/Users/charchill/Work/Projects/catchphrase-word-game/src/components/router/index.js",[],"/Users/charchill/Work/Projects/catchphrase-word-game/src/pages/main/main.js",[],"/Users/charchill/Work/Projects/catchphrase-word-game/src/components/main-body-content/mbc.js",[],"/Users/charchill/Work/Projects/catchphrase-word-game/src/pages/in-game/ingame.js",["31"],"import React, { useState, useEffect } from \"react\";\nimport '../in-game/ingame.css';\nimport { Button, Container, Row, Col, Alert, Card, ButtonGroup} from 'react-bootstrap';\nimport {useLocation, Link} from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLowVision, faEye } from '@fortawesome/free-solid-svg-icons';\nimport Footer from \"../../components/footer/footer.js\";\nimport TimerSound from \"../../assets/audio/timer.mp3\";\nimport EndTimerSound from \"../../assets/audio/bomb.mp3\";\nimport Header from \"../../components/header/header.js\";\nimport ProgressBar from 'react-customizable-progressbar';\nimport ReactGa from 'react-ga';\n\nReactGa.initialize(\"UA-154721739-1\");\nReactGa.pageview('catchphrase.motasimfoad.com - Ingame Screen');\n\nfunction Ingame() {\n  const [myObj, setMyObj] = useState(\"Tap next\");\n  const getData=()=>{\n    fetch('https://api.motasimfoad.com/catch_phrase/catch_phrase.json'\n    ).then(response => response.json())\n     .then((jsonData) => {\n        setMyObj(jsonData);\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n  }\n  const { state } = useLocation();\n  const [min] = useState(state);\n  const [millisec] = useState((min*60)*1000);\n  const [seconds, setSeconds] = useState(0);\n  const [flag, setFlag] = useState(true);\n  const [rand, setRand] =  useState(Math.round(Math.random() * (myObj.length-1)));\n  const [audio] = useState(new Audio(TimerSound));\n  const [endAudio] = useState(new Audio(EndTimerSound));\n  const [gameStatus, setGameStatus] = useState(false);\n  \n  function toggle() {\n     setFlag(!flag);\n  }\n\n  function word() {\n     setRand(Math.round(Math.random() * (myObj.length-1)));\n    }\n\n  function getPercentageChange(){\n    var secToMs = (seconds*1000);\n    var decreaseValue = millisec - secToMs;\n    var temp = (decreaseValue / millisec) * 100;\n    temp = Math.round(temp);\n    audio.play();\n    return temp;\n  }\n\n  useEffect(() => {\n     getData();\n     const interval = setInterval(() => {\n          setSeconds(seconds => seconds + 1);\n      }, 1000);\n     const timeout = setTimeout(() => {\n          endAudio.play();\n          setGameStatus(true);\n          clearInterval(interval);\n      }, millisec);\n      return () => clearTimeout(timeout);\n    }, []);\n \n    return (\n        <Container className=\"App\" fluid>\n           <Header />\n            <Row>\n              <Col>\n                <Alert className=\"App-Header\" variant=\"dark\">\n                  {flag ? <h3>{seconds}</h3>: <h4>hidden</h4>}\n                  <small>Timer</small>\n                </Alert>\n              </Col>\n              <Col>\n                <Alert className=\"App-Header\" variant=\"dark\">\n                  <Button variant=\"outline-dark\" onClick={toggle}>{flag ? <FontAwesomeIcon icon={faLowVision} />: <FontAwesomeIcon icon={faEye} />}</Button>\n                  <small>Visibility</small>\n                </Alert>\n              </Col>\n            </Row>\n            <Row>\n            <Card>\n              <Card.Body className=\"App-Game-Rules\">\n              <ProgressBar\n                  radius={40}\n                  progress={getPercentageChange()}\n                  cut={120}\n                  rotate={-210}\n                  counterClockwise\n                  inverse\n                  initialAnimation\n                  initialAnimationDelay={1}\n                  strokeWidth={10}\n                  strokeColor=\"#d35400\"\n                  strokeLinecap=\"butt\"\n                  trackStrokeWidth={10}\n                  trackStrokeLinecap=\"butt\"\n              >\n                <div className=\"indicator\">\n                <div>{myObj[rand]}</div>\n                </div>\n              </ProgressBar>\n              </Card.Body>\n              <Card.Footer>\n                <ButtonGroup aria-label=\"Basic example\">\n                  <Button variant=\"warning\" className=\"btnPadding\" onClick={word} disabled={gameStatus}>Next</Button>\n                  <Link to=\"/pregame\"><Button variant=\"danger\" className=\"btnPadding\">Reset</Button></Link>\n                </ButtonGroup>   \n              </Card.Footer>\n            </Card>\n            </Row>\n           <Footer />\n        </Container>\n  );\n}\n\nexport default Ingame;\n",["32","33"],"/Users/charchill/Work/Projects/catchphrase-word-game/src/pages/pre-game/pregame.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":67,"column":8,"nodeType":"40","endLine":67,"endColumn":10,"suggestions":"41"},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'endAudio' and 'millisec'. Either include them or remove the dependency array.","ArrayExpression",["46"],["44"],["45"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [endAudio, millisec]",{"range":"49","text":"50"},[2273,2275],"[endAudio, millisec]"]